{"version":3,"sources":["webhooks.js"],"names":["Webhooks","extend","create","webhook","request","method","service","resource","body","then","res","get","id","items","list","options","qs","spark","remove","statusCode","undefined","update"],"mappings":";;;;;;AAMA;;AAEA;;;;;;;;;;AAUA;;;;;;AAMA,IAAMA,WAAW,uBAAYC,MAAZ,CAAmB;AAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAC,QA/BkC,kBA+B3BC,OA/B2B,EA+BlB;AACd,WAAO,KAAKC,OAAL,CAAa;AAClBC,oBADkB;AAElBC,sBAFkB;AAGlBC,0BAHkB;AAIlBC,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GAvCiC;;;AAyClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAG,KAvEkC,eAuE9BR,OAvE8B,EAuErB;AACX,QAAMS,KAAKT,QAAQS,EAAR,IAAcT,OAAzB;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,sBADkB;AAElBC,8BAAsBK;AAFJ,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASK,KAAT,IAAkBH,IAAIF,IAA/B;AAAA,KAJD,CAAP;AAKD,GA/EiC;;;AAiFlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCAM,MAnHkC,gBAmH7BC,OAnH6B,EAmHpB;AAAA;;AACZ,WAAO,KAAKX,OAAL,CAAa;AAClBE,sBADkB;AAElBC,2BAFkB;AAGlBS,UAAID;AAHc,KAAb,EAKJN,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,oBAASA,GAAT,EAAc,MAAKO,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GA1HiC;;;AA4HlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAC,QAhKkC,kBAgK3Bf,OAhK2B,EAgKlB;AACd,QAAMS,KAAKT,QAAQS,EAAR,IAAcT,OAAzB;AACA,WAAO,KAAKC,OAAL,CAAa;AAClBC,sBADkB;AAElBC,sBAFkB;AAGlBC,8BAAsBK;AAHJ,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIS,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;AACD,aAAOV,IAAIF,IAAX;AACD,KAZI,CAAP;AAaD,GA/KiC;;;AAiLlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCAa,QAnNkC,kBAmN3BlB,OAnN2B,EAmNlB;AACd,QAAMS,KAAKT,QAAQS,EAAnB;AACA,WAAO,KAAKR,OAAL,CAAa;AAClBC,mBADkB;AAElBC,sBAFkB;AAGlBC,8BAAsBK,EAHJ;AAIlBJ,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GA5NiC;AAAA;AAAA,CAAnB,CAAjB,C,CAxBA;;;;;;kBAuPeR,Q","file":"webhooks.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin, Page} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Webhook\n * @property {string} id - The unique ID for the webhook.\n * @property {string} resource - The resource type for the webhook.\n * @property {string} event - The event type for the webhook.\n * @property {string} filter - The filter that defines the webhook scope.\n * @property {string} targetUrl - The URL that receives POST requests for each event.\n * @property {string} name - A user-friendly name for this webhook.\n */\n\n/**\n * A webhook notifies an application when an event for which the application is\n * registered has occurred.\n * @class\n * @extends SparkPlugin\n */\nconst Webhooks = SparkPlugin.extend({\n  /**\n   * Posts a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Types~Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Create Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert(webhook.id);\n   *     assert(webhook.resource);\n   *     assert(webhook.event);\n   *     assert(webhook.filter);\n   *     assert(webhook.targetUrl);\n   *     assert(webhook.name);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(webhook) {\n    return this.request({\n      method: `POST`,\n      service: `hydra`,\n      resource: `webhooks`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Shows details for a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise<Array<Webhook>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var webhook;\n   * ciscospark.rooms.create({title: 'Get Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.get(webhook.id);\n   *   })\n   *   .then(function(webhook2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(webhook2, webhook);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      service: `hydra`,\n      resource: `webhooks/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all webhooks.\n   * @instance\n   * @memberof Webhooks\n   * @param {Object} options\n   * @param {integer} options.max Limit the maximum number of webhooks in the response.\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room, webhook;\n   * ciscospark.rooms.create({title: 'List Webhooks Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: `hydra`,\n      resource: `webhooks/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Delete a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise}\n   * @example\n   * var ciscospark = require('../..');\n   * var room, webhook;\n   * ciscospark.rooms.create({title: 'Remove Webhook Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.remove(webhook);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 0);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(webhook) {\n    const id = webhook.id || webhook;\n    return this.request({\n      method: `DELETE`,\n      service: `hydra`,\n      resource: `webhooks/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Update a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * var webhook;\n   * ciscospark.rooms.create({title: 'Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     webhook.targetUrl = 'https://example.com/webhook/newtarget';\n   *     return ciscospark.webhooks.update(webhook);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.webhooks.get(webhook);\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert.equal(webhook.targetUrl, 'https://example.com/webhook/newtarget');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(webhook) {\n    const id = webhook.id;\n    return this.request({\n      method: `PUT`,\n      service: `hydra`,\n      resource: `webhooks/${id}`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Webhooks;\n"]}